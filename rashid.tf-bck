# ---------------------------------------------------------------------------------------------------------------------
# Creating elasticsearch domain policy
# ---------------------------------------------------------------------------------------------------------------------
resource "aws_elasticsearch_domain_policy" "es_policy" {
  count           = var.create ? 1 : 0
  domain_name     = aws_elasticsearch_domain.es[0].domain_name
  access_policies = <<CONFIG
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "es:*",
            "Principal": {
              "AWS": "*"
             },
            "Effect": "Allow",
            "Resource": "arn:aws:es:${var.domain_region}:${data.aws_caller_identity.current.account_id}:domain/${var.es_domain}/*"
        }
    ]
}
CONFIG
}
# ---------------------------------------------------------------------------------------------------------------------
# Creating elacticsearch cluster and attaching domain policy to it
# ---------------------------------------------------------------------------------------------------------------------
resource "aws_elasticsearch_domain" "es" {
  count                 = var.create ? 1 : 0
  domain_name           = var.es_domain
  elasticsearch_version = var.elasticsearch_version
  cluster_config {
    instance_type            = var.instance_type
    instance_count           = var.instance_count
    dedicated_master_enabled = var.dedicated_master_enabled
    dedicated_master_count   = var.dedicated_master_count
    dedicated_master_type    = var.dedicated_master_type
    zone_awareness_enabled   = var.zone_awareness_enabled
    dynamic "zone_awareness_config" {
      for_each = var.zone_awareness_enabled ? [var.zone_availability_count] : []
      content {
        availability_zone_count = zone_awareness_config.value
      }
    }
  }
  domain_endpoint_options {
    enforce_https       = true
    tls_security_policy = "Policy-Min-TLS-1-2-2019-07"
  }
  advanced_security_options {
    enabled                        = true
    internal_user_database_enabled = true
    master_user_options {
      master_user_name     = var.master_user
      master_user_password = local.password
    }
  }
  vpc_options {
    subnet_ids         = local.subnet_ids
    security_group_ids = local.security_groups
  }
  encrypt_at_rest {
    enabled    = var.encrypt_at_rest
    kms_key_id = local.kms_key_id
  }
  node_to_node_encryption {
    enabled = var.node_to_node_encryption_enabled
  }
  ebs_options {
    ebs_enabled = true
    volume_size = var.ebs_volume_size
    volume_type = var.ebs_volume_type
  }
  snapshot_options {
    automated_snapshot_start_hour = var.automated_snapshot_start_hour
  }
  log_publishing_options {
    enabled                  = var.log_publishing_index_enabled
    log_type                 = "INDEX_SLOW_LOGS"
    cloudwatch_log_group_arn = aws_cloudwatch_log_group.es_logs[0].arn
  }
  log_publishing_options {
    enabled                  = var.log_publishing_search_enabled
    log_type                 = "SEARCH_SLOW_LOGS"
    cloudwatch_log_group_arn = aws_cloudwatch_log_group.es_logs[0].arn
  }
  log_publishing_options {
    enabled                  = var.log_publishing_application_enabled
    log_type                 = "ES_APPLICATION_LOGS"
    cloudwatch_log_group_arn = aws_cloudwatch_log_group.es_logs[0].arn
  }
  tags = var.tags
}